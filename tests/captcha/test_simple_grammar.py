import pytest

from app.captcha.simple_grammar import simple_grammar


@pytest.mark.parametrize('payload, expected_answer', [
    ('неподдерживаемый пример', None),
    ('На пути ты встретил капчу.\n белиберда - Нaпишите прaвильно месяц с мaленькой буквы.', None),
    ('На пути ты встретил капчу.\n не*енка - Нaпишите прaвильно месяц с мaленькой буквы.', None),

    # months/days
    ('На пути ты встретил капчу.\n aв*уст - Нaпишите прaвильно месяц с мaленькой буквы.', 'август'),
    ('На пути ты встретил капчу.\n ок*ябрь - Нaпишите прaвильно месяц с мaленькой буквы.', 'октябрь'),
    ('На пути ты встретил капчу.\n *екaбрь - Нaпишите прaвильно месяц с мaленькой буквы.', 'декабрь'),
    ('На пути ты встретил капчу.\n ию*ь - Нaпишите прaвильно месяц с мaленькой буквы.', 'июнь'),
    ('На пути ты встретил капчу.\n июн* - Нaпишите прaвильно месяц с мaленькой буквы.', 'июнь'),

    # words
    ('На пути ты встретил капчу.\n вто*ник - Нaпишите прaвильно слово с мaленькой буквы', 'вторник'),
    ('На пути ты встретил капчу.\n суб*отa  - Нaпишите прaвильно слово с мaленькой буквы', 'суббота'),
    ('На пути ты встретил капчу.\n воск*есенье  - Нaпишите прaвильно слово с мaленькой буквы', 'воскресенье'),
    ('На пути ты встретил капчу.\n пор*рет - Нaпишите прaвильно слово с мaленькой буквы.', 'портрет'),
    ('На пути ты встретил капчу.\n кошк* - Нaпишите прaвильно слово с мaленькой буквы.', 'кошка'),
    ('На пути ты встретил капчу.\n к*лендaрь - Нaпишите прaвильно слово с мaленькой буквы.', 'календарь'),
    ('На пути ты встретил капчу.\n *обaкa - Нaпишите прaвильно слово с мaленькой буквы.', 'собака'),
    ('На пути ты встретил капчу.\n коло*ец - Нaпишите прaвильно слово с мaленькой буквы.', 'колодец'),
    ('На пути ты встретил капчу.\n город Ц*ртa - Нaпишите ответ с большой буквы.', 'Цирта'),
    ('На пути ты встретил капчу.\n выносливост* - Нaпишите ответ с большой буквы.', 'Выносливость'),
])
async def test_simple_grammar_happy_path(payload: str, expected_answer: str | None):
    result = await simple_grammar(payload)

    assert result == expected_answer
